# Base image for the blender environment. Used for CD/CI test and debug
# Dockerfile adapted from https://github.com/nytimes/rd-blender-docker
# To build the Docker image, create the build from root directory:
# docker build --build-arg BLENDER_VERSION=3.0 . -f Dockerfiles/Dockerfile.base_3.0 -t <image_name>:blender3.0
FROM nvidia/cudagl:10.1-base-ubuntu18.04

ARG BLENDER_VERSION=3.4

LABEL Author="T.Tian <alchem0x2a@gmail.com>,X.Wang <xingwang1991@gmail.com>"
LABEL Title="Blender base environment for testing beautiful-atoms"
LABEL RepoUrl="https://github.com/beautiful-atoms/beautiful-atoms"
LABEL ImageUrl="https://github.com/beautiful-atoms/beautiful-atoms/pkgs/container/beautiful-env"

# Common environment variables
ENV LC_ALL C.UTF-8
ENV LANG C.UTF-8
ENV HW="GPU"

ARG DEBIAN_FRONTEND noninteractive

# Install dependencies (copief from nytimes/rd-blender-docker)
RUN apt-get update && apt-get install -y \
	wget \
	libopenexr-dev \
	bzip2 \
	build-essential \
	zlib1g-dev \
	libxmu-dev \
	libxi-dev \
	libxxf86vm-dev \
    libxkbcommon-x11-0 \
	libfontconfig1 \
	libxrender1 \
	libgl1-mesa-glx \
	xz-utils \
    python3 \
    python3-pip &&\
    apt-get clean autoclean &&\
    apt-get autoremove --yes &&\
    rm -rf /var/lib/{apt,dpkg,cache,log}/

# Update the libstdc++.so.6 to latest version
# RUN apt-get update && apt install -yq software-properties-common &&\
#     add-apt-repository -y ppa:ubuntu-toolchain-r/test &&\
#     apt-get update && apt-get upgrade -yq libstdc++6 &&\
#     apt-get remove -y software-properties-common &&\
#     apt-get clean autoclean &&\
#     apt-get autoremove --yes &&\
#     rm -rf /var/lib/{apt,dpkg,cache,log}/

# Use automatic parser script to download blender bin and python source
WORKDIR /tmp
COPY Dockerfiles/bl_release_parser.py /tmp
RUN python3 -m pip install requests bs4 &&\
    echo Building with ${BLENDER_VERSION} &&\
    python3 bl_release_parser.py ${BLENDER_VERSION} &&\
    apt-get remove -y python3 python3-pip &&\
    apt-get clean autoclean &&\
    apt-get autoremove --yes &&\
    rm -rf /var/lib/{apt,dpkg,cache,log}/ &&\
    rm -rf /tmp/*

# Conda environment
# Enviorment variables
ENV CONDA_DIR="/opt/conda"
ENV PATH="${CONDA_DIR}/bin:${PATH}"


# Install miniconda 4.11.0 (minimal support py 3.10)
ENV MINICONDA_VERSION=4.12.0 \
    MINICONDA_MD5=7843dd7d0a2c53b0df37ca8189672992 \
    CONDA_VERSION=4.12.0 \
    PYTHON_VERSION=3.10.2


WORKDIR /tmp
RUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-py39_${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "${MINICONDA_MD5} *Miniconda3-py39_${MINICONDA_VERSION}-Linux-x86_64.sh" | md5sum -c - && \
    /bin/bash Miniconda3-py39_${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \
    rm Miniconda3-py39_${MINICONDA_VERSION}-Linux-x86_64.sh && \
    conda config --system --prepend channels conda-forge && \
    conda config --system --set show_channel_urls true && \
    conda install --quiet --yes \
    -c conda-forge \
    conda=${CONDA_VERSION} \
    python=$PYTHON_VERSION \
    pip &&\
    conda update --all --quiet --yes &&\
    conda clean --all -f -y

# Environment variables can be fixed at this step
ENV PATH "$PATH:/bin/${BLENDER_VERSION}/python/bin/"
ENV BLENDER_PATH "/bin/${BLENDER_VERSION}"
ENV BLENDERPIP "/bin/${BLENDER_VERSION}/python/bin/pip3"
ENV BLENDERPY "/bin/${BLENDER_VERSION}/python/bin/python3"

ADD ./ /tmp

RUN . ${CONDA_DIR}/bin/activate &&\
    yes | ${CONDA_DIR}/bin/python install.py --generate-env-file ./env.yml ${BLENDER_PATH} &&\
    rm -rf ${BLENDER_PATH}/python &&\
    ln -s ${CONDA_DIR} ${BLENDER_PATH}/python


RUN conda env update -n base --file ./env.yml &&\
    conda clean --all -f -y &&\
    rm -rf /tmp/*


# Set the working directory
ENV B_USER="blender"
ENV B_UID="1000"
ENV B_GID="100"
ENV HOME=/home/${B_USER}
# Force blender packages to use the conda lib
ENV LD_LIBRARY_PATH=$CONDA_DIR/lib:$LD_LIBRARY_PATH


# Add user
RUN useradd -m -s /bin/bash -N -u $B_UID $B_USER && \
    mkdir -p /workdir && \
    chmod g+w /etc/passwd && \
    chown -R ${B_UID}:${B_GID} ${HOME} &&\
    chown -R ${B_UID}:${B_GID} /workdir &&\
    chown -R ${B_USER}:${B_GID} /tmp


USER ${B_USER}
SHELL ["/bin/bash", "-c"]
WORKDIR /workdir

# Run a single test to see if scipy is using latest libstdcxx
RUN blender -b --python-exit-code 1 --python-expr "import scipy.stats"
